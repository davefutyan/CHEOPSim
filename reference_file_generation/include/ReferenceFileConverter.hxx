/*
 * ReferenceFileConverter.hxx
 *
 *  Created on: Dec 20, 2013
 *      Author: futyand
 */

#ifndef _REFERENCE_FILE_CONVERTER_HXX_
#define _REFERENCE_FILE_CONVERTER_HXX_

#include "boost/math/tools/stats.hpp"
#include "boost/multi_array.hpp"

typedef boost::multi_array<double, 3> array3D;
typedef boost::multi_array<double, 4> array4D;

using namespace std;

////////////////////////////////////////////////////////////////////////
/// @author David Futyan UGE
///
/// @brief Class to convert reference file data provided in ascii format
///        to the appropriate SOC format
////////////////////////////////////////////////////////////////////////

class ReferenceFileConverter {
public:

	ReferenceFileConverter(const ParamsPtr params); ///< Constructor: read in the configuration

	virtual ~ReferenceFileConverter() {};

	void process() const; ///< Calls the relevant method to generate the reference file according to the configuration

private:

	//Methods to generate reference files used in post launch data processing
	void convertQE(double ccdTemp) const; ///< Converts QE vs wavelength from ascii to FITS
	void convertThroughput(bool endOfLife) const; ///< Converts throughput vs wavelength from ascii to FITS
	void convertWhitePSF(bool singleTemperaturePSF, double psfTemperature, bool oversampledPsf=false) const; ///< Converts white PSF from ascii to FITS
	void convertCcdLocationPSF() const; ///< Converts PSF at various CCD locations from separate FITS files to a REF_APP_WhiteCCDLocationPSF FITS file

	//Methods used to generate versions of reference files used by CHEOPSim before launch
	//For post launch data processing the dark frame was provided by the Instrument Team
	//and the flat field was generated by SOC using CHEOPSim/python/ff_synthesis.py
	void convertDarkFrame() const; ///< Converts dark frame from the input FITS structure to the required FITS structure
	void convertFlatField() const; ///< Converts flat field frame from ascii to FITS

	//Methods to generate reference files applicable to CHEOPSim only
	void convertOrbit() const; ///< Converts orbit time series from ascii to FITS
	void convertJitter(double jitterOffset) const; ///< Converts jitter time series from ascii to FITS
	void convertStrayLight(string ltan, double altitude, double pointingRA, double pointingDec) const; ///< Converts stray light time series from ascii to FITS
	void convertTemperature() const; ///< Converts temperature time series from ascii to FITS
	void convertColouredPSF(bool singleTemperaturePSF, double psfTemperature, bool oversampledPsf=false) const; ///< Converts monochromatic PSF from ascii to FITS

	string m_validityStart; ///< Validity start date for the output file
	string m_validityStop; ///< Validity end date for the output file
	string m_inputFilename; ///< Name of input ascii file
	string m_provider; ///< Provider of the input file
	string m_description; ///< Description of the input file

	const ParamsPtr m_params; ///< ProgramParams pointer containing the input parameters

};

#endif /* _REFERENCE_FILE_CONVERTER_HXX_ */
